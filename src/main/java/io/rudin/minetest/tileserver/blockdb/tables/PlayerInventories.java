/*
 * This file is generated by jOOQ.
*/
package io.rudin.minetest.tileserver.blockdb.tables;


import io.rudin.minetest.tileserver.blockdb.DefaultSchema;
import io.rudin.minetest.tileserver.blockdb.Indexes;
import io.rudin.minetest.tileserver.blockdb.Keys;
import io.rudin.minetest.tileserver.blockdb.tables.records.PlayerInventoriesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlayerInventories extends TableImpl<PlayerInventoriesRecord> {

    private static final long serialVersionUID = 1345091695;

    /**
     * The reference instance of <code>player_inventories</code>
     */
    public static final PlayerInventories PLAYER_INVENTORIES = new PlayerInventories();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlayerInventoriesRecord> getRecordType() {
        return PlayerInventoriesRecord.class;
    }

    /**
     * The column <code>player_inventories.player</code>.
     */
    public final TableField<PlayerInventoriesRecord, String> PLAYER = createField("player", org.jooq.impl.SQLDataType.VARCHAR(60).nullable(false), this, "");

    /**
     * The column <code>player_inventories.inv_id</code>.
     */
    public final TableField<PlayerInventoriesRecord, Integer> INV_ID = createField("inv_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>player_inventories.inv_width</code>.
     */
    public final TableField<PlayerInventoriesRecord, Integer> INV_WIDTH = createField("inv_width", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>player_inventories.inv_name</code>.
     */
    public final TableField<PlayerInventoriesRecord, String> INV_NAME = createField("inv_name", org.jooq.impl.SQLDataType.CLOB.nullable(false).defaultValue(org.jooq.impl.DSL.field("''::text", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>player_inventories.inv_size</code>.
     */
    public final TableField<PlayerInventoriesRecord, Integer> INV_SIZE = createField("inv_size", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>player_inventories</code> table reference
     */
    public PlayerInventories() {
        this(DSL.name("player_inventories"), null);
    }

    /**
     * Create an aliased <code>player_inventories</code> table reference
     */
    public PlayerInventories(String alias) {
        this(DSL.name(alias), PLAYER_INVENTORIES);
    }

    /**
     * Create an aliased <code>player_inventories</code> table reference
     */
    public PlayerInventories(Name alias) {
        this(alias, PLAYER_INVENTORIES);
    }

    private PlayerInventories(Name alias, Table<PlayerInventoriesRecord> aliased) {
        this(alias, aliased, null);
    }

    private PlayerInventories(Name alias, Table<PlayerInventoriesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PLAYER_INVENTORIES_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PlayerInventoriesRecord> getPrimaryKey() {
        return Keys.PLAYER_INVENTORIES_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PlayerInventoriesRecord>> getKeys() {
        return Arrays.<UniqueKey<PlayerInventoriesRecord>>asList(Keys.PLAYER_INVENTORIES_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<PlayerInventoriesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PlayerInventoriesRecord, ?>>asList(Keys.PLAYER_INVENTORIES__PLAYER_INVENTORIES_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PlayerInventories as(String alias) {
        return new PlayerInventories(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PlayerInventories as(Name alias) {
        return new PlayerInventories(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayerInventories rename(String name) {
        return new PlayerInventories(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayerInventories rename(Name name) {
        return new PlayerInventories(name, null);
    }
}
