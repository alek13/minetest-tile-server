/*
 * This file is generated by jOOQ.
*/
package io.rudin.minetest.tileserver.blockdb.tables;


import io.rudin.minetest.tileserver.blockdb.DefaultSchema;
import io.rudin.minetest.tileserver.blockdb.Indexes;
import io.rudin.minetest.tileserver.blockdb.Keys;
import io.rudin.minetest.tileserver.blockdb.tables.records.ServerStatsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ServerStats extends TableImpl<ServerStatsRecord> {

    private static final long serialVersionUID = -555192597;

    /**
     * The reference instance of <code>server_stats</code>
     */
    public static final ServerStats SERVER_STATS = new ServerStats();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ServerStatsRecord> getRecordType() {
        return ServerStatsRecord.class;
    }

    /**
     * The column <code>server_stats.key</code>.
     */
    public final TableField<ServerStatsRecord, String> KEY = createField("key", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>server_stats.value</code>.
     */
    public final TableField<ServerStatsRecord, String> VALUE = createField("value", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>server_stats</code> table reference
     */
    public ServerStats() {
        this(DSL.name("server_stats"), null);
    }

    /**
     * Create an aliased <code>server_stats</code> table reference
     */
    public ServerStats(String alias) {
        this(DSL.name(alias), SERVER_STATS);
    }

    /**
     * Create an aliased <code>server_stats</code> table reference
     */
    public ServerStats(Name alias) {
        this(alias, SERVER_STATS);
    }

    private ServerStats(Name alias, Table<ServerStatsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ServerStats(Name alias, Table<ServerStatsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SERVER_STATS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ServerStatsRecord> getPrimaryKey() {
        return Keys.SERVER_STATS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ServerStatsRecord>> getKeys() {
        return Arrays.<UniqueKey<ServerStatsRecord>>asList(Keys.SERVER_STATS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServerStats as(String alias) {
        return new ServerStats(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServerStats as(Name alias) {
        return new ServerStats(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ServerStats rename(String name) {
        return new ServerStats(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ServerStats rename(Name name) {
        return new ServerStats(name, null);
    }
}
