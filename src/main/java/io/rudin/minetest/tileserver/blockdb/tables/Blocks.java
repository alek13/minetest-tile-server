/*
 * This file is generated by jOOQ.
*/
package io.rudin.minetest.tileserver.blockdb.tables;


import io.rudin.minetest.tileserver.blockdb.DefaultSchema;
import io.rudin.minetest.tileserver.blockdb.Indexes;
import io.rudin.minetest.tileserver.blockdb.Keys;
import io.rudin.minetest.tileserver.blockdb.tables.records.BlocksRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Blocks extends TableImpl<BlocksRecord> {

    private static final long serialVersionUID = 756115654;

    /**
     * The reference instance of <code>blocks</code>
     */
    public static final Blocks BLOCKS = new Blocks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BlocksRecord> getRecordType() {
        return BlocksRecord.class;
    }

    /**
     * The column <code>blocks.posx</code>.
     */
    public final TableField<BlocksRecord, Integer> POSX = createField("posx", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>blocks.posy</code>.
     */
    public final TableField<BlocksRecord, Integer> POSY = createField("posy", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>blocks.posz</code>.
     */
    public final TableField<BlocksRecord, Integer> POSZ = createField("posz", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>blocks.data</code>.
     */
    public final TableField<BlocksRecord, byte[]> DATA = createField("data", org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>blocks.mtime</code>.
     */
    public final TableField<BlocksRecord, Timestamp> MTIME = createField("mtime", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>blocks</code> table reference
     */
    public Blocks() {
        this(DSL.name("blocks"), null);
    }

    /**
     * Create an aliased <code>blocks</code> table reference
     */
    public Blocks(String alias) {
        this(DSL.name(alias), BLOCKS);
    }

    /**
     * Create an aliased <code>blocks</code> table reference
     */
    public Blocks(Name alias) {
        this(alias, BLOCKS);
    }

    private Blocks(Name alias, Table<BlocksRecord> aliased) {
        this(alias, aliased, null);
    }

    private Blocks(Name alias, Table<BlocksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BLOCKS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BlocksRecord> getPrimaryKey() {
        return Keys.BLOCKS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BlocksRecord>> getKeys() {
        return Arrays.<UniqueKey<BlocksRecord>>asList(Keys.BLOCKS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Blocks as(String alias) {
        return new Blocks(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Blocks as(Name alias) {
        return new Blocks(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Blocks rename(String name) {
        return new Blocks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Blocks rename(Name name) {
        return new Blocks(name, null);
    }
}
