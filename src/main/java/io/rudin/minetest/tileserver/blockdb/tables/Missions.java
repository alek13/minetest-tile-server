/*
 * This file is generated by jOOQ.
*/
package io.rudin.minetest.tileserver.blockdb.tables;


import io.rudin.minetest.tileserver.blockdb.DefaultSchema;
import io.rudin.minetest.tileserver.blockdb.Indexes;
import io.rudin.minetest.tileserver.blockdb.Keys;
import io.rudin.minetest.tileserver.blockdb.tables.records.MissionsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Missions extends TableImpl<MissionsRecord> {

    private static final long serialVersionUID = 552958151;

    /**
     * The reference instance of <code>missions</code>
     */
    public static final Missions MISSIONS = new Missions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MissionsRecord> getRecordType() {
        return MissionsRecord.class;
    }

    /**
     * The column <code>missions.id</code>.
     */
    public final TableField<MissionsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('missions_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>missions.name</code>.
     */
    public final TableField<MissionsRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>missions.description</code>.
     */
    public final TableField<MissionsRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>missions.time</code>.
     */
    public final TableField<MissionsRecord, Integer> TIME = createField("time", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>missions.owner</code>.
     */
    public final TableField<MissionsRecord, String> OWNER = createField("owner", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>missions.x</code>.
     */
    public final TableField<MissionsRecord, Integer> X = createField("x", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>missions.y</code>.
     */
    public final TableField<MissionsRecord, Integer> Y = createField("y", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>missions.z</code>.
     */
    public final TableField<MissionsRecord, Integer> Z = createField("z", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>missions.posx</code>.
     */
    public final TableField<MissionsRecord, Integer> POSX = createField("posx", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>missions.posy</code>.
     */
    public final TableField<MissionsRecord, Integer> POSY = createField("posy", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>missions.posz</code>.
     */
    public final TableField<MissionsRecord, Integer> POSZ = createField("posz", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>missions.mtime</code>.
     */
    public final TableField<MissionsRecord, Long> MTIME = createField("mtime", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>missions</code> table reference
     */
    public Missions() {
        this(DSL.name("missions"), null);
    }

    /**
     * Create an aliased <code>missions</code> table reference
     */
    public Missions(String alias) {
        this(DSL.name(alias), MISSIONS);
    }

    /**
     * Create an aliased <code>missions</code> table reference
     */
    public Missions(Name alias) {
        this(alias, MISSIONS);
    }

    private Missions(Name alias, Table<MissionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Missions(Name alias, Table<MissionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MISSIONS_MAPBLOCK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MissionsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_MISSIONS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Missions as(String alias) {
        return new Missions(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Missions as(Name alias) {
        return new Missions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Missions rename(String name) {
        return new Missions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Missions rename(Name name) {
        return new Missions(name, null);
    }
}
