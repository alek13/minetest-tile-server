/*
 * This file is generated by jOOQ.
*/
package io.rudin.minetest.tileserver.tiledb.tables;


import io.rudin.minetest.tileserver.tiledb.DefaultSchema;
import io.rudin.minetest.tileserver.tiledb.Indexes;
import io.rudin.minetest.tileserver.tiledb.Keys;
import io.rudin.minetest.tileserver.tiledb.tables.records.TilesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tiles extends TableImpl<TilesRecord> {

    private static final long serialVersionUID = 330058274;

    /**
     * The reference instance of <code>tiles</code>
     */
    public static final Tiles TILES = new Tiles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TilesRecord> getRecordType() {
        return TilesRecord.class;
    }

    /**
     * The column <code>tiles.x</code>.
     */
    public final TableField<TilesRecord, Integer> X = createField("x", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>tiles.y</code>.
     */
    public final TableField<TilesRecord, Integer> Y = createField("y", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>tiles.z</code>.
     */
    public final TableField<TilesRecord, Integer> Z = createField("z", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>tiles.mtime</code>.
     */
    public final TableField<TilesRecord, Long> MTIME = createField("mtime", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>tiles.tile</code>.
     */
    public final TableField<TilesRecord, byte[]> TILE = createField("tile", org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * Create a <code>tiles</code> table reference
     */
    public Tiles() {
        this(DSL.name("tiles"), null);
    }

    /**
     * Create an aliased <code>tiles</code> table reference
     */
    public Tiles(String alias) {
        this(DSL.name(alias), TILES);
    }

    /**
     * Create an aliased <code>tiles</code> table reference
     */
    public Tiles(Name alias) {
        this(alias, TILES);
    }

    private Tiles(Name alias, Table<TilesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tiles(Name alias, Table<TilesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TILES_PKEY, Indexes.TILES_TIME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TilesRecord> getPrimaryKey() {
        return Keys.TILES_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TilesRecord>> getKeys() {
        return Arrays.<UniqueKey<TilesRecord>>asList(Keys.TILES_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tiles as(String alias) {
        return new Tiles(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tiles as(Name alias) {
        return new Tiles(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tiles rename(String name) {
        return new Tiles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tiles rename(Name name) {
        return new Tiles(name, null);
    }
}
