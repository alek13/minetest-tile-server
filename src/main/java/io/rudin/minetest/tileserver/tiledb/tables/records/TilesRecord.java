/*
 * This file is generated by jOOQ.
*/
package io.rudin.minetest.tileserver.tiledb.tables.records;


import io.rudin.minetest.tileserver.tiledb.tables.Tiles;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TilesRecord extends UpdatableRecordImpl<TilesRecord> implements Record5<Integer, Integer, Integer, Long, byte[]> {

    private static final long serialVersionUID = 837842824;

    /**
     * Setter for <code>tiles.x</code>.
     */
    public void setX(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>tiles.x</code>.
     */
    public Integer getX() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>tiles.y</code>.
     */
    public void setY(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>tiles.y</code>.
     */
    public Integer getY() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>tiles.z</code>.
     */
    public void setZ(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>tiles.z</code>.
     */
    public Integer getZ() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>tiles.mtime</code>.
     */
    public void setMtime(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>tiles.mtime</code>.
     */
    public Long getMtime() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>tiles.tile</code>.
     */
    public void setTile(byte... value) {
        set(4, value);
    }

    /**
     * Getter for <code>tiles.tile</code>.
     */
    public byte[] getTile() {
        return (byte[]) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record3<Integer, Integer, Integer> key() {
        return (Record3) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row5<Integer, Integer, Integer, Long, byte[]> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row5<Integer, Integer, Integer, Long, byte[]> valuesRow() {
        return (Row5) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return Tiles.TILES.X;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field2() {
        return Tiles.TILES.Y;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field3() {
        return Tiles.TILES.Z;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field4() {
        return Tiles.TILES.MTIME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<byte[]> field5() {
        return Tiles.TILES.TILE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component1() {
        return getX();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component2() {
        return getY();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component3() {
        return getZ();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component4() {
        return getMtime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public byte[] component5() {
        return getTile();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getX();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value2() {
        return getY();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value3() {
        return getZ();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value4() {
        return getMtime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public byte[] value5() {
        return getTile();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TilesRecord value1(Integer value) {
        setX(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TilesRecord value2(Integer value) {
        setY(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TilesRecord value3(Integer value) {
        setZ(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TilesRecord value4(Long value) {
        setMtime(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TilesRecord value5(byte... value) {
        setTile(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TilesRecord values(Integer value1, Integer value2, Integer value3, Long value4, byte[] value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TilesRecord
     */
    public TilesRecord() {
        super(Tiles.TILES);
    }

    /**
     * Create a detached, initialised TilesRecord
     */
    public TilesRecord(Integer x, Integer y, Integer z, Long mtime, byte[] tile) {
        super(Tiles.TILES);

        set(0, x);
        set(1, y);
        set(2, z);
        set(3, mtime);
        set(4, tile);
    }
}
